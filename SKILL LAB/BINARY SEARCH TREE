 5. Write a C program to implement a binary search tree (BST) and perform insertion,
deletion, and traversal (inorder, preorder, and postorder).
Solution:
#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
 int data;
 struct Node *left, *right;
} Node;
Node* createNode(int data) {
 Node newNode = (Node)malloc(sizeof(Node));
 newNode->data = data;
 newNode->left = newNode->right = NULL;
 return newNode;
}
Node* insert(Node *root, int data) {
 if (root == NULL) return createNode(data);
 if (data < root->data) root->left = insert(root->left, data);
 else if (data > root->data) root->right = insert(root->right, data);
 return root;
}
Node* minValueNode(Node *node) {
 Node *current = node;
 while (current && current->left != NULL) current = current->left;
 return current;
}
Node* deleteNode(Node *root, int key) {
 if (root == NULL) return root;
 if (key < root->data) root->left = deleteNode(root->left, key);
 else if (key > root->data) root->right = deleteNode(root->right, key);
 else {
 if (root->left == NULL) {
 Node *temp = root->right;
 free(root);
 return temp;
 } else if (root->right == NULL) {
 Node *temp = root->left;
 free(root);
 return temp;
 }
 Node *temp = minValueNode(root->right);
 root->data = temp->data;
 root->right = deleteNode(root->right, temp->data);
 }
 return root;
}
void inorderTraversal(Node *root) {
 if (root != NULL) {
 inorderTraversal(root->left);
 printf("%d ", root->data);
 inorderTraversal(root->right);
 }
}
void preorderTraversal(Node *root) {
 if (root != NULL) {
 printf("%d ", root->data);
 preorderTraversal(root->left);
 preorderTraversal(root->right);
 }
}
void postorderTraversal(Node *root) {
 if (root != NULL) {
 postorderTraversal(root->left);
 postorderTraversal(root->right);
 printf("%d ", root->data);
 }
}
int main() {
 Node *root = NULL;
 root = insert(root, 50);
 root = insert(root, 30);
 root = insert(root, 20);
 root = insert(root, 40);
 root = insert(root, 70);
 root = insert(root, 60);
 root = insert(root, 80);
 printf("Inorder traversal: ");
 inorderTraversal(root);
 printf("\n");
 root = deleteNode(root, 20);
 printf("Inorder traversal after deletion: ");
 inorderTraversal(root);
 printf("\n");
 return 0;
}
